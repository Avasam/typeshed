[tool.black]
line-length = 130
target-version = ["py310"]
skip-magic-trailing-comma = true
# Exclude protobuf files because they have long line lengths
# that can't be autofixed. Like docstrings and import aliases.
# Ideally, we could configure Black to allow longer line lengths
# for just these files, but doesn't seem possible yet.
force-exclude = ".*_pb2.pyi"

[tool.ruff]
line-length = 130
# Oldest supported Python version
target-version = "py38"
preview = true # Help catch typing-related lint issues early
# fix = true
exclude = [
    # virtual environment
    ".env",
    ".venv",
    "env",
    # cache directories, etc.:
    ".git",
    ".mypy_cache",
    ".pytype",
]

[tool.ruff.lint]
# Disable all rules on test cases by default:
# test cases often deliberately contain code
# that might not be considered idiomatic or modern.
#
# Note: some rules that are specifically useful to the test cases
# are invoked via separate runs of ruff in pre-commit:
# see our .pre-commit-config.yaml file for details
exclude = ["**/test_cases/**/*.py"]
# We still use flake8-pyi and flake8-noqa to check these (see .flake8 config file);
# tell ruff not to flag these as e.g. "unused noqa comments"
external = ["F821", "NQA", "Y"]
select = [
    # "PTH", # TODO !
    # "TD", # TODO !
    "A", # flake8-builtins
    "ARG", # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "D", # pydocstyle
    "DOC", # pydoclint
    "DTZ", # flake8-datetimez
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "FBT", # flake8-boolean-trap
    "FLY", # flynt
    "G", # flake8-logging-format
    "I", # isort
    "ISC", # flake8-implicit-str-concat
    "LOG", # flake8-logging
    "N", # pep8-naming
    "NPY", # NumPy-specific rules
    "PERF", # Perflint
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # Pylint
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # Ruff-specific and unused-noqa
    "S", # flake8-bandit
    "SLOT", # flake8-slots
    "TRY", # tryceratops
    "UP", # pyupgrade
    "YTT", # flake8-2020
    # Flake8 base rules
    "E", # pycodestyle Error
    "F", # Pyflakes
    "W", # pycodestyle Warning
    # Only include flake8-annotations rules that are autofixable. Otherwise leave this to mypy+pyright
    "ANN2",
    # Most refurb rules are in preview and can be opinionated,
    # consider them individually as they come out of preview (last check: 0.8.4)
    "FURB105", # Unnecessary empty string passed to `print`
    "FURB129", # Instead of calling `readlines()`, iterate over file object directly
    "FURB136", # Replace `if` expression with `{min_max}` call
    "FURB167", # Use of regular expression alias `re.{}`
    "FURB168", # Prefer `is` operator over `isinstance` to check if an object is `None`
    "FURB169", # Compare the identities of `{object}` and None instead of their respective types
    "FURB177", # Prefer `Path.cwd()` over `Path().resolve()` for current-directory lookups
    "FURB187", # Use of assignment of `reversed` on list `{name}`
    # PYI: only enable rules that have autofixes and that we always want to fix (even manually),
    # avoids duplicate # noqa with flake8-pyi and flake8-noqa flagging `PYI` codes
    # See https://github.com/plinss/flake8-noqa/issues/22
    "PYI009", # Empty body should contain `...`, not pass
    "PYI010", # Function body must contain only `...`
    "PYI012", # Class bodies must not contain `pass`
    "PYI013", # Non-empty class bodies must not contain `...`
    "PYI014", # Only simple default values allowed for arguments
    "PYI015", # Only simple default values allowed for assignments
    "PYI016", # Duplicate union member `{}`
    "PYI019", # Methods like `{method_name}` should return `Self` instead of a custom `TypeVar`
    "PYI020", # Quoted annotations should not be included in stubs
    "PYI025", # Use `from collections.abc import Set as AbstractSet` to avoid confusion with the `set` builtin
    # "PYI026", Waiting for this mypy bug to be fixed: https://github.com/python/mypy/issues/16581
    "PYI030", # Multiple literal members in a union. Use a single literal, e.g. `Literal[{}]`
    "PYI032", # Prefer `object` to `Any` for the second parameter to `{method_name}`
    "PYI034", # `__new__` methods usually return self at runtime
    "PYI036", # Star-args in `{method_name}` should be annotated with `object`
    "PYI044", # `from __future__ import annotations` has no effect in stub files, since type checkers automatically treat stubs as having those semantics
    "PYI055", # Multiple `type[T]` usages in a union. Combine them into one, e.g., `type[{union_str}]`.
    "PYI058", # Use `{return_type}` as the return value for simple `{method}` methods
    # "PYI061", # TODO: Enable when out of preview
    "PYI062", # Duplicate literal member `{}`
    "PYI064", # `Final[Literal[{literal}]]` can be replaced with a bare Final
    # flake8-simplify, excluding rules that can reduce performance or readability due to long line formatting
    "SIM101", # Multiple `isinstance` calls for `{name}`, merge into a single call
    "SIM103", # Return the condition `{condition}` directly
    "SIM107", # Don't use return in `try-except` and `finally`
    "SIM109", # Use `{replacement}` instead of multiple equality comparisons
    "SIM112", # Use capitalized environment variable `{expected}` instead of `{actual}`
    "SIM113", # Use `enumerate()` for index variable `{index}` in `for` loop
    "SIM114", # Combine `if` branches using logical `or` operator
    "SIM115", # Use a context manager for opening files
    "SIM118", # Use key `{operator}` dict instead of key `{operator} dict.keys()`
    "SIM2", # flake8-simplify conditional ordering rules
    "SIM300", # Yoda condition detected
    "SIM401", # Use `{contents}` instead of an if block
    "SIM910", # Use `{expected}` instead of `{actual}` (dict-get-with-none-default)
    "SIM911", # Use `{expected}` instead of `{actual}` (zip-dict-keys-and-values)
    # Don't include TC rules that create a TYPE_CHECKING block or stringifies annotations
    "TC004", # Move import `{qualified_name}` out of type-checking block. Import is used for more than type hinting.
    "TC005", # Found empty type-checking block
    # "TC008", # TODO: Enable when out of preview
    "TC010", # Invalid string member in `X | Y`-style union type
]
extend-safe-fixes = [
    "UP036", # Remove unnecessary `sys.version_info` blocks
]
ignore = [
    # TODO
    "ASYNC221", # I don't know how to improve subprocess.check_call calls to satisfy this
    "RUF036", # None not at the end of the type annotation. # Request for autofix: astral-sh/ruff#15136
    ###
    # Rules that can conflict with the formatter (Black)
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    ###
    "E111", # indentation-with-invalid-multiple
    "E114", # indentation-with-invalid-multiple-comment
    "E117", # over-indented
    "W191", # tab-indentation
    ###
    # Rules we don't want or don't agree with
    ###
    # We're not a library, no need to document everything
    "D1", # Missing docstring in ...
    # We want D211: No blank lines allowed before class docstring
    "D203", # 1 blank line required before class docstring
    # Doesn't support split "summary line"
    "D205", # 1 blank line required between summary line and description
    # We want D212: Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line
    "D401", # First line of docstring should be in imperative mood
    # Return/yield type is enough documentation for us
    "DOC201", # return is not documented in docstring
    "DOC402", # yield is not documented in docstring
    # We're not a public library, users are contributors that already directly reads teh code, clear error messages are sufficient
    "DOC501", # Raised exception missing from docstring
    # Prefer explicit, but allow implicit multiline
    # (hence lint.flake8-implicit-str-concat.allow-multiline isn't set to false)
    "ISC003", # Explicitly concatenated string should be implicitly concatenated
    # Python 3.11 introduced "zero cost" exception handling, our tests & scripts run on modern Python versions
    "PERF203", # try-except within a loop incurs performance overhead
    "PLR09", # Too many ...
    # Typeshed tests and scripts are never run in optimized mode
    "S101", # Use of assert detected
    # We use subprocess a lot in scripts and tests
    "S404", # subprocess module is possibly insecure
    # Prone to false positives astral-sh/ruff#4045
    "S603", # subprocess call: check for execution of untrusted input
    # Full paths would make cross-environment compatibility a nightmare
    "S607", # Starting a process with a partial executable path
    "TRY003", # Avoid specifying long messages outside the exception class
    # Slower and more verbose https://github.com/astral-sh/ruff/issues/7871
    "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`
    ###
    # False-positives, but already checked by type-checkers
    ###
    # Configuring namespace-packages = ["scripts/sync_protobuf"] doesn't work ?
    "PLC2701", # Private name import {name} from external module {module}
    # Ruff doesn't support multi-file analysis yet: https://github.com/astral-sh/ruff/issues/5295
    "RUF013", # PEP 484 prohibits implicit `Optional`
]

[tool.ruff.lint.per-file-ignores]
"*.pyi" = [
    # A lot of stubs are incomplete on purpose, and that's configured through pyright
    # Some ANN204 (special method) are autofixable in stubs, but not all.
    "ANN2", # Missing return type annotation for ...
    # Rules that are out of the control of stub authors:
    "A001", # builtin-variable-shadowing
    "A002", # builtin-argument-shadowing
    "A004", # builtin-import-shadowing
    "F403", # `from . import *` used; unable to detect undefined names
    "S3", # Use of insecure ...
    # Most pep8-naming rules don't apply for third-party stubs like typeshed.
    # N811 to N814 could apply, but we often use them to disambiguate a name whilst making it look like a more common one
    "N8",
    "PIE796", # Enum contains duplicate value # astral-sh/ruff#15132
    "PLC2701", # Private name import from external module
    "PLW1641", # Object does not implement __hash__ method
    "S105", # Possible hardcoded password assigned
    "S106", # Possible hardcoded password assigned to argument
    "S107", # Possible hardcoded password assigned to function default
    "S4", # Insecure and vulnerable libraries
    # Stubs can sometimes re-export entire modules.
    # Issues with using a star-imported name will be caught by type-checkers.
    "F405", # may be undefined, or defined from star imports
    # Ruff 0.8.0 added sorting of __all__ and __slots_.
    # There is no consensus on whether we want to apply this to stubs, so keeping the status quo.
    # See https://github.com/python/typeshed/pull/13108
    "RUF022",
    "RUF023",
]
"*_pb2.pyi" = [
    # Leave the docstrings as-is, matching source
    "D", # pydocstyle
    # See comment on black's force-exclude config above
    "E501", # Line too long
]

[tool.ruff.lint.pydocstyle]
convention = "pep257" # https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention

[tool.ruff.lint.isort]
split-on-trailing-comma = false
combine-as-imports = true
extra-standard-library = [
    # Group these with stdlib
    "_typeshed",
    "typing_extensions",
    # Extra modules not recognized by Ruff
    # Added in Python 3.9
    "zoneinfo",
]
known-first-party = ["_utils", "ts_utils"]

[tool.typeshed]
oldest_supported_python = "3.9"
