from abc import ABC
from typing import ClassVar

from redis import ResponseError
from redis.exceptions import RedisError
from redis.typing import EncodableT

class BaseParser(ABC):
    EXCEPTION_CLASSES: ClassVar[dict[str, type[RedisError] | dict[str, type[RedisError]]]]
    @classmethod
    def parse_error(cls, response: str) -> RedisError: ...
    def on_disconnect(self) -> None: ...
    def on_connect(self, connection) -> None: ...

class AsyncBaseParser(BaseParser):
    def __init__(self, socket_read_size: int) -> None: ...
    async def can_read_destructive(self) -> bool: ...
    async def read_response(self, disable_decoding: bool = ...) -> EncodableT | ResponseError | None | list[EncodableT]: ...
