from _typeshed import Incomplete
from typing import Any, Generic, TypeVar

_T = TypeVar("_T")

class _SupportsDict(Generic[_T]):
    __dict__: dict[str, _T]

EMPTY_ANNOTATIONS: Any

class SupportsAnnotations: ...
class SupportsCloneAnnotations(SupportsAnnotations): ...
class SupportsWrappingAnnotations(SupportsAnnotations): ...

class Annotated(Generic[_T]):
    __dict__: dict[str, _T]
    __element: _SupportsDict[_T]
    def __init__(self, element: _SupportsDict[_T], values) -> None: ...
    def __reduce__(self): ...
    def __hash__(self) -> int: ...
    def __eq__(self, other) -> bool: ...
    @property
    def entity_namespace(self): ...

annotated_classes: dict[type[Incomplete], type[Annotated]] = ...  # pyright: ignore[reportMissingTypeArgument]  # pytype issue
