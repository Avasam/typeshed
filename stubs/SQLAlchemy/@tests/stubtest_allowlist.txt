# Parameter's default value would always fail
sqlalchemy.sql.elements.Slice.self_group

# Expanding keyword arguments in stubs
sqlalchemy.ext.declarative.as_declarative
sqlalchemy.orm.strategy_options.loader_option.__call__
sqlalchemy.testing.provision.register.__call__

# not always present
sqlalchemy.cresultproxy.BaseRow.__getattr__
sqlalchemy.engine.BaseRow.__getattr__
sqlalchemy.engine.row.BaseRow.__getattr__
sqlalchemy.engine.base.Engine.logging_name  # initialized if not None
sqlalchemy.engine.Engine.logging_name  # initialized if not None
sqlalchemy.sql.lambdas.PyWrapper.__clause_element__
sqlalchemy.testing.util.non_refcount_gc_collect

# wrong argument name in implementation ("self" instead of "cls")
sqlalchemy.engine.URL.__new__
sqlalchemy.engine.url.URL.__new__
sqlalchemy.util.langhelpers._symbol.__new__

# abstract fields not present at runtime
sqlalchemy.engine.Transaction.connection
sqlalchemy.engine.Transaction.is_active
sqlalchemy.engine.base.Transaction.connection
sqlalchemy.engine.base.Transaction.is_active
# @type_check_only
sqlalchemy.orm.RelationshipProperty.__get__
sqlalchemy.orm.properties.RelationshipProperty.__get__
sqlalchemy.orm.relationships.RelationshipProperty.__get__

# initialized to None during class construction, but overridden during __init__() or __new__()
sqlalchemy.Column.foreign_keys
sqlalchemy.Column.key
sqlalchemy.engine.base.Connection.engine
sqlalchemy.engine.base.ExceptionContextImpl.is_disconnect
sqlalchemy.engine.Connection.engine
sqlalchemy.ForeignKeyConstraint.elements
sqlalchemy.MetaData.tables
sqlalchemy.orm.Mapper.concrete
sqlalchemy.orm.mapper.Mapper.concrete
sqlalchemy.orm.mapper.Mapper.non_primary
sqlalchemy.orm.Mapper.non_primary
sqlalchemy.schema.Column.foreign_keys
sqlalchemy.schema.Column.key
sqlalchemy.schema.ColumnCollectionConstraint.columns
sqlalchemy.schema.ColumnCollectionMixin.columns
sqlalchemy.schema.ForeignKeyConstraint.elements
sqlalchemy.schema.MetaData.tables
sqlalchemy.schema.Table.constraints
sqlalchemy.schema.Table.indexes
sqlalchemy.sql.elements.BindParameter.key
sqlalchemy.sql.elements.ColumnClause.key
sqlalchemy.sql.elements.Label.key
sqlalchemy.sql.elements.Over.element
sqlalchemy.sql.elements.TableValuedColumn.key
sqlalchemy.sql.expression.BindParameter.key
sqlalchemy.sql.expression.ColumnClause.key
sqlalchemy.sql.expression.Label.key
sqlalchemy.sql.expression.Over.element
sqlalchemy.sql.schema.Column.foreign_keys
sqlalchemy.sql.schema.Column.key
sqlalchemy.sql.schema.ColumnCollectionConstraint.columns
sqlalchemy.sql.schema.ColumnCollectionMixin.columns
sqlalchemy.sql.schema.ForeignKeyConstraint.elements
sqlalchemy.sql.schema.MetaData.tables
sqlalchemy.sql.schema.Table.constraints
sqlalchemy.sql.schema.Table.indexes
sqlalchemy.sql.selectable.BindParameter.key
sqlalchemy.sql.selectable.ColumnClause.key
sqlalchemy.sql.selectable.TableValuedColumn.key
sqlalchemy.Table.constraints
sqlalchemy.Table.indexes
sqlalchemy.orm.Mapper.single
sqlalchemy.orm.mapper.Mapper.single

# uses @memoized_property at runtime, but we use @property for compatibility
sqlalchemy.engine.URL.normalized_query
sqlalchemy.engine.url.URL.normalized_query

# runtime has extra internal arguments that are inconsistent across micro versions
sqlalchemy.testing.engines.testing_engine

# __new__ signature conflicts with __init__ signature (which is more precise),
# so __new__ is deliberately omitted in the stub
sqlalchemy.sql.annotation.Annotated.__new__

# At runtime __new__ is defined, but we define __init__ in the stub
# because otherwise all subclasses would be identified by pyright
# as having conflicting __new__/__init__ methods
sqlalchemy.orm.unitofwork.PostSortRec.__new__

# KeyError/AttributeError on import due to dynamic initialization from a different module
sqlalchemy.testing.fixtures
sqlalchemy.testing.pickleable
sqlalchemy.testing.plugin.bootstrap

# unclear problems
sqlalchemy.sql.functions.array_agg.type

# method arguments starting with double underscores in the implementation trips up stubtest
sqlalchemy.testing.resolve_lambda
sqlalchemy.testing.util.resolve_lambda
sqlalchemy.orm.collections.MappedCollection.update

# stubtest thinks __slots__ are always members
# https://github.com/python/mypy/issues/13906
sqlalchemy.sql.elements.quoted_name.lower
sqlalchemy.sql.elements.quoted_name.upper
sqlalchemy.sql.expression.quoted_name.lower
sqlalchemy.sql.expression.quoted_name.upper
sqlalchemy.sql.quoted_name.lower
sqlalchemy.sql.quoted_name.upper
sqlalchemy.orm.ColumnProperty.Comparator.__clause_element__
sqlalchemy.orm.properties.ColumnProperty.Comparator.__clause_element__
