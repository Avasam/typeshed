from _typeshed import Incomplete
from typing import ClassVar, final

from win32.lib.pywintypes import HANDLEType, error as error

def NCBBuffer(size, /): ...
def Netbios(ncb: NCB, /): ...
def WNetAddConnection2(
    NetResource: NETRESOURCE, Password: Incomplete | None = ..., UserName: Incomplete | None = ..., Flags: int = ...
) -> None: ...
def WNetAddConnection3(
    HwndOwner: int | HANDLEType,
    NetResource: NETRESOURCE,
    Password: Incomplete | None = ...,
    UserName: Incomplete | None = ...,
    Flags: int = ...,
) -> None: ...
def WNetCancelConnection2(name: str, flags, force, /) -> None: ...
def WNetOpenEnum(scope, _type, usage, resource: NETRESOURCE, /) -> int: ...
def WNetCloseEnum(handle: HANDLEType, /) -> None: ...
def WNetEnumResource(handle: HANDLEType, maxExtries: int = ..., /) -> list[NETRESOURCE]: ...
def WNetGetUser(connection: str | None = ..., /) -> str: ...
def WNetGetUniversalName(localPath: str, infoLevel, /) -> str: ...
def WNetGetResourceInformation(NetResource: NETRESOURCE, /) -> tuple[NETRESOURCE, Incomplete]: ...
def WNetGetLastError() -> tuple[Incomplete, Incomplete, Incomplete]: ...
def WNetGetResourceParent(NetResource: NETRESOURCE, /) -> NETRESOURCE: ...
def WNetGetConnection(connection: str | None = ..., /) -> str: ...
@final
class NETRESOURCE:  # aka: PyNETRESOURCEType
    __name__: ClassVar[str] = "PyNETRESOURCE"
    dwScope: int
    dwType: int
    dwDisplayType: int
    dwUsage: int
    lpComment: str | None
    lpLocalName: str | None
    lpProvider: str | None
    lpRemoteName: str | None

@final
class NCB:  # aka: PyNCBType
    __name__: ClassVar[str] = "PyNCB"
    @property
    def Bufflen(self): ...
    @property
    def Callname(self) -> str: ...
    @property
    def Cmd_cplt(self): ...
    @property
    def Command(self): ...
    @property
    def Event(self): ...
    @property
    def Lana_num(self): ...
    @property
    def Lsn(self): ...
    @property
    def Name(self) -> str: ...
    @property
    def Num(self): ...
    @property
    def Post(self): ...
    def Reset(self, *args): ...  # incomplete
    @property
    def Retcode(self): ...
    @property
    def Rto(self) -> str: ...
    @property
    def Sto(self) -> str: ...

# old "deprecated" names, before types could create instances.
NETRESOURCEType = NETRESOURCE
NCBType = NCB
