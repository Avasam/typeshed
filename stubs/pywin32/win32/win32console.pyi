from _typeshed import Incomplete
from collections.abc import Iterable
from typing import ClassVar, Literal, NoReturn, final, overload

from win32.lib.pywintypes import SECURITY_ATTRIBUTESType, error as error

def GetConsoleProcessList() -> tuple[int, ...]: ...
def CreateConsoleScreenBuffer(
    DesiredAccess=..., ShareMode=..., SecurityAttributes: SECURITY_ATTRIBUTESType | None = ..., Flags=...
) -> PyConsoleScreenBufferType: ...
def GetConsoleDisplayMode(): ...
def AttachConsole(ProcessId) -> None: ...
def AllocConsole() -> None: ...
def FreeConsole() -> None: ...
def GetConsoleCP(): ...
def GetConsoleOutputCP(): ...
def SetConsoleCP(CodePageId) -> None: ...
def SetConsoleOutputCP(CodePageID) -> None: ...
def GetConsoleSelectionInfo(): ...
def AddConsoleAlias(Source, Target, ExeName) -> None: ...
def GetConsoleAliases(ExeName: str) -> str: ...
def GetConsoleAliasExes(): ...
def GetConsoleWindow(): ...
def GetNumberOfConsoleFonts(): ...
def SetConsoleTitle(ConsoleTitle: str) -> None: ...
def GetConsoleTitle(): ...
@overload
def GenerateConsoleCtrlEvent(CtrlEvent: Literal[1], ProcessGroupId: Literal[0] = ...) -> NoReturn: ...
@overload
def GenerateConsoleCtrlEvent(CtrlEvent: Literal[0, 1], ProcessGroupId: int) -> None: ...
def GetStdHandle(StdHandle: int) -> PyConsoleScreenBufferType: ...

ATTACH_PARENT_PROCESS: int
BACKGROUND_BLUE: int
BACKGROUND_GREEN: int
BACKGROUND_INTENSITY: int
BACKGROUND_RED: int
COMMON_LVB_GRID_HORIZONTAL: int
COMMON_LVB_GRID_LVERTICAL: int
COMMON_LVB_GRID_RVERTICAL: int
COMMON_LVB_LEADING_BYTE: int
COMMON_LVB_REVERSE_VIDEO: int
COMMON_LVB_TRAILING_BYTE: int
COMMON_LVB_UNDERSCORE: int
CONSOLE_FULLSCREEN: int
CONSOLE_FULLSCREEN_HARDWARE: int
CONSOLE_FULLSCREEN_MODE: int
CONSOLE_MOUSE_DOWN: int
CONSOLE_MOUSE_SELECTION: int
CONSOLE_NO_SELECTION: int
CONSOLE_SELECTION_IN_PROGRESS: int
CONSOLE_SELECTION_NOT_EMPTY: int
CONSOLE_TEXTMODE_BUFFER: int
CONSOLE_WINDOWED_MODE: int
CTRL_BREAK_EVENT: int
CTRL_C_EVENT: int
ENABLE_ECHO_INPUT: int
ENABLE_LINE_INPUT: int
ENABLE_MOUSE_INPUT: int
ENABLE_PROCESSED_INPUT: int
ENABLE_PROCESSED_OUTPUT: int
ENABLE_WINDOW_INPUT: int
ENABLE_WRAP_AT_EOL_OUTPUT: int
FOCUS_EVENT: int
FOREGROUND_BLUE: int
FOREGROUND_GREEN: int
FOREGROUND_INTENSITY: int
FOREGROUND_RED: int
KEY_EVENT: int
LOCALE_USER_DEFAULT: int
MENU_EVENT: int
MOUSE_EVENT: int

@final
class PyCOORDType:
    __name__: ClassVar[str] = "PyCOORD"
    def __init__(self, X: int = ..., Y: int = ...) -> None: ...
    X: int
    Y: int

@final
class PyConsoleScreenBufferType:
    __name__: ClassVar[str] = "PyConsoleScreenBuffer"
    def __init__(self, Handle) -> None: ...
    def SetConsoleActiveScreenBuffer(self) -> None: ...
    def GetConsoleCursorInfo(self) -> tuple[Incomplete, Incomplete]: ...
    def SetConsoleCursorInfo(self, Size, Visible) -> None: ...
    def GetConsoleMode(self): ...
    def SetConsoleMode(self, Mode) -> None: ...
    def ReadConsole(self, NumberOfCharsToRead): ...
    def WriteConsole(self, Buffer: str) -> int: ...
    def FlushConsoleInputBuffer(self) -> None: ...
    def SetConsoleTextAttribute(self, Attributes: int) -> None: ...
    def SetConsoleCursorPosition(self, CursorPosition: PyCOORDType) -> None: ...
    def SetConsoleScreenBufferSize(self, Size: PyCOORDType) -> None: ...
    def SetConsoleWindowInfo(self, Absolute, ConsoleWindow: PySMALL_RECTType) -> None: ...
    def GetConsoleScreenBufferInfo(self): ...
    def GetLargestConsoleWindowSize(self) -> PyCOORDType: ...
    def FillConsoleOutputAttribute(self, Attribute, Length, WriteCoord: PyCOORDType): ...
    def FillConsoleOutputCharacter(self, Character, Length, WriteCoord: PyCOORDType): ...
    def ReadConsoleOutputCharacter(self, Length, ReadCoord: PyCOORDType) -> str: ...
    def ReadConsoleOutputAttribute(self, Length, ReadCoord: PyCOORDType) -> tuple[Incomplete, ...]: ...
    def WriteConsoleOutputCharacter(self, Characters, WriteCoord: PyCOORDType): ...
    def WriteConsoleOutputAttribute(self, Attributes: tuple[Incomplete, ...], WriteCoord: PyCOORDType): ...
    def ScrollConsoleScreenBuffer(
        self,
        ScrollRectangle: PySMALL_RECTType,
        ClipRectangle: PySMALL_RECTType,
        DestinationOrigin: PyCOORDType,
        FillCharacter,
        FillAttribute,
    ) -> None: ...
    def GetCurrentConsoleFont(self, MaximumWindow: bool = ...) -> tuple[int, PyCOORDType]: ...
    def GetConsoleFontSize(self, Font) -> PyCOORDType: ...
    def SetConsoleFont(self, Font) -> None: ...
    def SetStdHandle(self, StdHandle) -> None: ...
    def SetConsoleDisplayMode(self, Flags, NewScreenBufferDimensions: PyCOORDType) -> None: ...
    def WriteConsoleInput(self, Buffer: Iterable[PyINPUT_RECORDType]): ...
    def ReadConsoleInput(self, Length) -> tuple[PyINPUT_RECORDType, ...]: ...
    def PeekConsoleInput(self, Length) -> tuple[PyINPUT_RECORDType, ...]: ...
    def GetNumberOfConsoleInputEvents(self): ...
    def Close(self, *args): ...  # incomplete
    def Detach(self, *args): ...  # incomplete

@final
class PyINPUT_RECORDType:
    __name__: ClassVar[str] = "PyINPUT_RECORD"
    def __init__(self, EventType: int) -> None: ...
    EventType: int
    KeyDown: int | bool
    RepeatCount: int
    VirtualKeyCode: int
    VirtualScanCode: Incomplete
    Char: str
    ControlKeyState: int
    ButtonState: int
    EventFlags: int
    MousePosition: PyCOORDType
    Size: PyCOORDType
    SetFocus: Incomplete
    CommandId: Incomplete

@final
class PySMALL_RECTType:
    __name__: ClassVar[str] = "PySMALL_RECT"
    def __init__(self, Left: int = ..., Top: int = ..., Right: int = ..., Bottom: int = ...) -> None: ...
    Left: int
    Top: int
    Right: int
    Bottom: int

STD_ERROR_HANDLE: int
STD_INPUT_HANDLE: int
STD_OUTPUT_HANDLE: int
WINDOW_BUFFER_SIZE_EVENT: int
