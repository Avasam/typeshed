from typing import Any

def CertAddSerializedElementToStore(*args, **kwargs) -> Any: ...
def CertAlgIdToOID(*args, **kwargs) -> Any: ...
def CertEnumPhysicalStore(*args, **kwargs) -> Any: ...
def CertEnumSystemStore(*args, **kwargs) -> Any: ...
def CertEnumSystemStoreLocation(*args, **kwargs) -> Any: ...
def CertNameToStr(*args, **kwargs) -> Any: ...
def CertOIDToAlgId(*args, **kwargs) -> Any: ...
def CertOpenStore(*args, **kwargs) -> Any: ...
def CertOpenSystemStore(*args, **kwargs) -> Any: ...
def CertRegisterSystemStore(*args, **kwargs) -> Any: ...
def CertUnregisterSystemStore(*args, **kwargs) -> Any: ...
def CryptAcquireContext(*args, **kwargs) -> Any: ...
def CryptBinaryToString(*args, **kwargs) -> Any: ...
def CryptDecodeMessage(*args, **kwargs) -> Any: ...
def CryptDecodeObjectEx(*args, **kwargs) -> Any: ...
def CryptDecryptAndVerifyMessageSignature(*args, **kwargs) -> Any: ...
def CryptDecryptMessage(*args, **kwargs) -> Any: ...
def CryptEncodeObjectEx(*args, **kwargs) -> Any: ...
def CryptEncryptMessage(*args, **kwargs) -> Any: ...
def CryptEnumKeyIdentifierProperties(*args, **kwargs) -> Any: ...
def CryptEnumOIDInfo(*args, **kwargs) -> Any: ...
def CryptEnumProviderTypes(*args, **kwargs) -> Any: ...
def CryptEnumProviders(*args, **kwargs) -> Any: ...
def CryptFindLocalizedName(*args, **kwargs) -> Any: ...
def CryptFindOIDInfo(*args, **kwargs) -> Any: ...
def CryptFormatObject(*args, **kwargs) -> Any: ...
def CryptGetDefaultProvider(*args, **kwargs) -> Any: ...
def CryptGetKeyIdentifierProperty(*args, **kwargs) -> Any: ...
def CryptGetMessageCertificates(*args, **kwargs) -> Any: ...
def CryptGetMessageSignerCount(*args, **kwargs) -> Any: ...
def CryptProtectData(*args, **kwargs) -> Any: ...
def CryptQueryObject(*args, **kwargs) -> Any: ...
def CryptSetProviderEx(*args, **kwargs) -> Any: ...
def CryptSignAndEncryptMessage(*args, **kwargs) -> Any: ...
def CryptSignMessage(*args, **kwargs) -> Any: ...
def CryptStringToBinary(*args, **kwargs) -> Any: ...
def CryptUnprotectData(*args, **kwargs) -> Any: ...
def CryptVerifyDetachedMessageSignature(*args, **kwargs) -> Any: ...
def CryptVerifyMessageSignature(*args, **kwargs) -> Any: ...
def PFXImportCertStore(*args, **kwargs) -> Any: ...
def PFXIsPFXBlob(*args, **kwargs) -> Any: ...
def PFXVerifyPassword(*args, **kwargs) -> Any: ...
