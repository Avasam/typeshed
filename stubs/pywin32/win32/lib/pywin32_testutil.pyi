import unittest
from _typeshed import Incomplete

def str2bytes(sval): ...
def str2memory(sval): ...
def ob2memory(ob): ...

class LeakTestCase(unittest.TestCase):
    real_test: Incomplete
    num_test_cases: int
    num_leak_iters: int
    def __init__(self, real_test) -> None: ...
    def countTestCases(self): ...
    def __call__(self, result: Incomplete | None = ...) -> None: ...
    def runTest(self) -> None: ...

class TestLoader(unittest.TestLoader):
    def loadTestsFromTestCase(self, testCaseClass): ...
    def fixupTestsForLeakTests(self, test): ...
    def loadTestsFromModule(self, mod): ...
    def loadTestsFromName(self, name, module: Incomplete | None = ...): ...

non_admin_error_codes: Incomplete

def check_is_admin(): ...

class TestSkipped(Exception): ...

TextTestResult: Incomplete
TextTestResult = unittest.TextTestResult

class TestResult(TextTestResult):
    skips: Incomplete
    def __init__(self, *args, **kw) -> None: ...
    def addError(self, test, err) -> None: ...
    def printErrors(self) -> None: ...

class TestRunner(unittest.TextTestRunner): ...

class TestProgram(unittest.TestProgram):
    testRunner: Incomplete
    def runTests(self) -> None: ...

def testmain(*args, **kw) -> None: ...
