from _typeshed import Incomplete
from datetime import datetime
from typing import ClassVar, Literal, NoReturn, final, overload
from typing_extensions import Never, TypeAlias, deprecated

import _win32typing

class error(Exception):
    winerror: int
    funcname: str
    strerror: str
    def __init__(self, winerror: int, funcname: str, strerror: str, /): ...

class com_error(Exception): ...

def DosDateTimeToTime() -> TimeType: ...
def Unicode() -> str: ...
def UnicodeFromRaw(_str: str, /) -> str: ...
def IsTextUnicode(_str: str, flags, /) -> tuple[Incomplete, Incomplete]: ...
def OVERLAPPED() -> OVERLAPPEDType: ...
def IID(iidString: str, is_bytes: bool = ..., /) -> IIDType: ...
def Time(timeRepr, /) -> TimeType: ...
def CreateGuid() -> IIDType: ...
def ACL(bufSize: int = ..., /) -> ACLType: ...
def SID(buffer, idAuthority, subAuthorities, bufSize=..., /) -> SIDType: ...
def SECURITY_ATTRIBUTES() -> SECURITY_ATTRIBUTESType: ...
def SECURITY_DESCRIPTOR() -> SECURITY_DESCRIPTORType: ...
def HANDLE() -> HANDLEType: ...
def HKEY() -> _win32typing.PyHKEY: ...
def WAVEFORMATEX() -> WAVEFORMATEXType: ...
def TimeStamp(*args): ...  # incomplete

FALSE: Literal[False]
TRUE: Literal[True]
WAVE_FORMAT_PCM: int

UnicodeType: TypeAlias = str

class TimeType(datetime):  # aka: PyTime
    __name__: ClassVar[str] = "datetime"
    Format = datetime.strftime

@final
class IIDType:  # __repr__: IID
    __name__: ClassVar[str] = "PyIID"
    @deprecated("Cannot create 'PyIID' instances. Use pywintypes.IID instead.")
    def __init__(self, *args: Never, **kwargs: Never) -> NoReturn: ...

class SECURITY_DESCRIPTORType:
    __name__: ClassVar[str] = "PySECURITY_DESCRIPTOR"
    @deprecated("Cannot create 'PySECURITY_DESCRIPTOR' instances. Use pywintypes.SECURITY_DESCRIPTOR instead.")
    def __init__(self, *args: Never, **kwargs: Never) -> NoReturn: ...
    def Initialize(self) -> None: ...
    def GetSecurityDescriptorOwner(self) -> SIDType: ...
    def GetSecurityDescriptorDacl(self) -> ACLType: ...
    def GetSecurityDescriptorSacl(self) -> ACLType: ...
    def GetSecurityDescriptorControl(self) -> tuple[Incomplete, Incomplete]: ...
    def SetSecurityDescriptorOwner(self, sid: SIDType, bOwnerDefaulted: int | bool, /) -> None: ...
    def SetSecurityDescriptorGroup(self, sid: SIDType, bOwnerDefaulted, /): ...
    def SetSecurityDescriptorDacl(self, bSaclPresent: int | bool, SACL: ACLType, bSaclDefaulted: int | bool, /) -> None: ...
    def SetSecurityDescriptorSacl(self, bSaclPresent, SACL: ACLType, bSaclDefaulted, /) -> None: ...
    def SetSecurityDescriptorControl(self, ControlBitsOfInterest, ControlBitsToSet, /) -> None: ...
    def IsValid(self) -> bool: ...
    def GetLength(self) -> None: ...
    def IsSelfRelative(self) -> bool: ...
    def GetSecurityDescriptorGroup(*args): ...  # incomplete
    def SetDacl(*args): ...  # incomplete

@final
class SECURITY_ATTRIBUTESType:
    __name__: ClassVar[str] = "PySECURITY_ATTRIBUTES"
    @deprecated("Cannot create 'PySECURITY_ATTRIBUTES' instances. Use pywintypes.SECURITY_ATTRIBUTES instead.")
    def __init__(self, *args: Never, **kwargs: Never) -> NoReturn: ...
    bInheritHandle: int
    SECURITY_DESCRIPTOR: SECURITY_DESCRIPTORType

class SIDType:
    __name__: ClassVar[str] = "PySID"
    @deprecated("Cannot create 'PySID' instances. Use pywintypes.SID instead.")
    def __init__(self, *args: Never, **kwargs: Never) -> NoReturn: ...
    def Initialize(self, idAuthority, numSubauthorities, /) -> None: ...
    def IsValid(self) -> bool: ...
    def SetSubAuthority(self, index, val, /) -> None: ...
    def GetLength(self): ...
    def GetSubAuthorityCount(self): ...
    def GetSubAuthority(self): ...
    def GetSidIdentifierAuthority(self) -> tuple[Incomplete, Incomplete, Incomplete, Incomplete, Incomplete, Incomplete]: ...

class ACLType:
    __name__: ClassVar[str] = "PyACL"
    @deprecated("Cannot create 'PyACL' instances. Use pywintypes.ACL instead.")
    def __init__(self, *args: Never, **kwargs: Never) -> NoReturn: ...
    def Initialize(self) -> None: ...
    def IsValid(self) -> bool: ...
    @overload
    def AddAccessAllowedAce(self, access: int, sid: SIDType, /) -> None: ...
    @overload
    def AddAccessAllowedAce(self, revision: int, access: int, sid: SIDType, /) -> None: ...
    def AddAccessAllowedAceEx(self, revision: int, aceflags: int, access: int, sid: SIDType, /) -> None: ...
    def AddAccessAllowedObjectAce(
        self, AceRevision, AceFlags, AccessMask, ObjectTypeGuid: IIDType, InheritedObjectTypeGuid: IIDType, sid: SIDType, /
    ) -> None: ...
    def AddAccessDeniedAce(self, revision: int, access: int, sid: SIDType, access1: int, sid1: SIDType, /) -> None: ...
    def AddAccessDeniedAceEx(self, revision: int, aceflags: int, access: int, sid: SIDType, /) -> None: ...
    def AddMandatoryAce(self, AceRevision, AceFlags, MandatoryPolicy, LabelSid: SIDType, /) -> None: ...
    def AddAuditAccessAce(self, dwAceRevision, dwAccessMask, sid: SIDType, bAuditSuccess, bAuditFailure, /) -> None: ...
    def AddAuditAccessAceEx(
        self, dwAceRevision, AceFlags, dwAccessMask, sid: SIDType, bAuditSuccess, bAuditFailure, /
    ) -> None: ...
    def AddAuditAccessObjectAce(
        self,
        dwAceRevision,
        AceFlags,
        dwAccessMask,
        ObjectTypeGuid: IIDType,
        InheritedObjectTypeGuid: IIDType,
        sid: SIDType,
        bAuditSuccess,
        bAuditFailure,
        /,
    ) -> None: ...
    def GetAclSize(self): ...
    def GetAclRevision(self): ...
    def GetAceCount(self) -> int: ...
    def GetAce(self, index: int, /) -> tuple[tuple[int, int], int, SIDType]: ...
    def DeleteAce(self, index: int, /) -> None: ...
    def GetEffectiveRightsFromAcl(self, trustee: _win32typing.PyTRUSTEE | dict[str, int | SIDType], /) -> int: ...
    def GetAuditedPermissionsFromAcl(self, trustee: _win32typing.PyTRUSTEE, /) -> tuple[Incomplete, Incomplete]: ...
    def SetEntriesInAcl(self, obexpl_list: tuple[dict[str, int | dict[str, int | SIDType]], ...], /) -> ACLType: ...
    def GetExplicitEntriesFromAcl(self) -> tuple[dict[str, int | dict[str, int | SIDType]]] | None: ...
    def AddAccessDeniedObjectAce(*args): ...  # incomplete

class HANDLEType:
    __name__: ClassVar[str] = "PyHANDLE"
    @deprecated("Cannot create 'PyHANDLE' instances. Use pywintypes.HANDLE instead.")
    def __init__(self, *args: Never, **kwargs: Never) -> NoReturn: ...
    @property
    def handle(self) -> int: ...
    def Close(self) -> None: ...
    def close(self) -> None: ...
    def Detach(self) -> None: ...
    def __int__(self) -> int: ...

@final
class OVERLAPPEDType:
    __name__: ClassVar[str] = "PyOVERLAPPED"
    @deprecated("Cannot create 'PyOVERLAPPED' instances. Use pywintypes.OVERLAPPED instead.")
    def __init__(self, *args: Never, **kwargs: Never) -> NoReturn: ...
    Offset: int
    OffsetHigh: int
    object: object
    dword: int
    hEvent: int
    Internal: int
    InternalHigh: int

class DEVMODEWType:
    __name__: ClassVar[str] = "PyDEVMODEW"
    def __init__(self, DriverExtra: int = ...) -> None: ...
    SpecVersion: int
    DriverVersion: int
    @property
    def Size(self) -> int: ...
    @property
    def DriverExtra(self) -> int: ...
    Fields: int
    Orientation: int
    PaperSize: int
    PaperLength: int
    PaperWidth: int
    Position_x: int
    Position_y: int
    DisplayOrientation: int
    DisplayFixedOutput: int
    Scale: int
    Copies: int
    DefaultSource: int
    PrintQuality: int
    Color: int
    Duplex: int
    YResolution: int
    TTOption: int
    Collate: int
    LogPixels: int
    BitsPerPel: int
    PelsWidth: int
    PelsHeight: int
    DisplayFlags: int
    DisplayFrequency: int
    ICMMethod: int
    ICMIntent: int
    MediaType: int
    DitherType: int
    Reserved1: int
    Reserved2: int
    Nup: int
    PanningWidth: int
    PanningHeight: int
    DeviceName: str
    FormName: str
    @property
    def DriverData(self) -> bytes | None: ...
    @DriverData.setter
    def DriverData(self, value: bytes) -> None: ...
    def Clear(*args): ...  # incomplete

class DEVMODEType:
    # Yes it's the same name as DEVMODEWType, no it's not a typo
    # Probably a typo in source code though
    __name__: ClassVar[str] = "PyDEVMODEW"
    @property
    def SpecVersion(self) -> int: ...
    @property
    def DriverVersion(self) -> int: ...
    @property
    def Size(self) -> int: ...
    @property
    def DriverExtra(self) -> int: ...
    @property
    def Fields(self) -> int: ...
    @property
    def Orientation(self) -> int: ...
    @property
    def PaperSize(self) -> int: ...
    @property
    def PaperLength(self) -> int: ...
    @property
    def PaperWidth(self) -> int: ...
    @property
    def Position_x(self) -> int: ...
    @property
    def Position_y(self) -> int: ...
    @property
    def DisplayOrientation(self) -> int: ...
    @property
    def DisplayFixedOutput(self) -> int: ...
    @property
    def Scale(self) -> int: ...
    @property
    def Copies(self) -> int: ...
    @property
    def DefaultSource(self) -> int: ...
    @property
    def PrintQuality(self) -> int: ...
    @property
    def Color(self) -> int: ...
    @property
    def Duplex(self) -> int: ...
    @property
    def YResolution(self) -> int: ...
    @property
    def TTOption(self) -> int: ...
    @property
    def Collate(self) -> int: ...
    @property
    def LogPixels(self) -> int: ...
    @property
    def BitsPerPel(self) -> int: ...
    @property
    def PelsWidth(self) -> int: ...
    @property
    def PelsHeight(self) -> int: ...
    @property
    def DisplayFlags(self) -> int: ...
    @property
    def DisplayFrequency(self) -> int: ...
    @property
    def ICMMethod(self) -> int: ...
    @property
    def ICMIntent(self) -> int: ...
    @property
    def MediaType(self) -> int: ...
    @property
    def DitherType(self) -> int: ...
    @property
    def Reserved1(self) -> int: ...
    @property
    def Reserved2(self) -> int: ...
    @property
    def Nup(self) -> int: ...
    @property
    def PanningWidth(self) -> int: ...
    @property
    def PanningHeight(self) -> int: ...
    @property
    def DeviceName(self) -> str: ...
    @property
    def FormName(self) -> str: ...
    @property
    def DriverData(self) -> Incomplete | None: ...
    def Clear(self) -> None: ...

class WAVEFORMATEXType:
    __name__: ClassVar[str] = "PyWAVEFORMATEX"
    @deprecated("Cannot create 'WAVEFORMATEXType' instances. Use pywintypes.WAVEFORMATEX instead.")
    def __init__(self, *args: Never, **kwargs: Never) -> NoReturn: ...
    @property
    def wFormatTag(self) -> int: ...
    @property
    def nChannels(self) -> int: ...
    @property
    def nSamplesPerSec(self) -> int: ...
    @property
    def nAvgBytesPerSec(self) -> int: ...
    @property
    def nBlockAlign(self) -> int: ...
    @property
    def wBitsPerSample(self) -> int: ...
