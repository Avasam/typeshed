from _typeshed import Incomplete

from win32com.client import Dispatch as Dispatch, gencache as gencache, genpy as genpy, selecttlb as selecttlb

usageHelp: str
bForDemandDefault: int
error: str

def usage() -> None: ...
def ShowInfo(spec) -> None: ...

class SimpleProgress(genpy.GeneratorProgress):
    verboseLevel: Incomplete
    def __init__(self, verboseLevel) -> None: ...
    def Close(self) -> None: ...
    def Finished(self) -> None: ...
    def SetDescription(self, desc, maxticks: Incomplete | None = ...) -> None: ...
    def Tick(self, desc: Incomplete | None = ...) -> None: ...
    def VerboseProgress(self, desc, verboseLevel: int = ...) -> None: ...
    def LogBeginGenerate(self, filename) -> None: ...
    def LogWarning(self, desc) -> None: ...

class GUIProgress(SimpleProgress):
    dialog: Incomplete
    def __init__(self, verboseLevel) -> None: ...
    def Close(self) -> None: ...
    def Starting(self, tlb_desc) -> None: ...
    def SetDescription(self, desc, maxticks: Incomplete | None = ...) -> None: ...
    def Tick(self, desc: Incomplete | None = ...) -> None: ...

def GetTypeLibsForSpec(arg): ...
def GenerateFromTypeLibSpec(
    typelibInfo,
    file: Incomplete | None = ...,
    verboseLevel: Incomplete | None = ...,
    progressInstance: Incomplete | None = ...,
    bUnicodeToString: Incomplete | None = ...,
    bForDemand=...,
    bBuildHidden: int = ...,
) -> None: ...
def GenerateChildFromTypeLibSpec(
    child,
    typelibInfo,
    verboseLevel: Incomplete | None = ...,
    progressInstance: Incomplete | None = ...,
    bUnicodeToString: Incomplete | None = ...,
) -> None: ...
def main(): ...
