from _typeshed import Incomplete

from . import build as build

debugging: int
debugging_attr: int
LCID: int
ERRORS_BAD_CONTEXT: Incomplete
ALL_INVOKE_TYPES: Incomplete

def debug_print(*args) -> None: ...
def debug_attr_print(*args) -> None: ...
def MakeMethod(func, inst, cls): ...

PyIDispatchType: Incomplete
PyIUnknownType: Incomplete

def Dispatch(
    IDispatch,
    userName: Incomplete | None = ...,
    createClass: Incomplete | None = ...,
    typeinfo: Incomplete | None = ...,
    UnicodeToString: Incomplete | None = ...,
    clsctx=...,
): ...
def MakeOleRepr(IDispatch, typeinfo, typecomp): ...
def DumbDispatch(
    IDispatch,
    userName: Incomplete | None = ...,
    createClass: Incomplete | None = ...,
    UnicodeToString: Incomplete | None = ...,
    clsctx=...,
): ...

class CDispatch:
    def __init__(
        self,
        IDispatch,
        olerepr,
        userName: Incomplete | None = ...,
        UnicodeToString: Incomplete | None = ...,
        lazydata: Incomplete | None = ...,
    ) -> None: ...
    def __call__(self, *args): ...
    def __bool__(self): ...
    def __dir__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __int__(self): ...
    def __len__(self): ...
    def __getitem__(self, index): ...
    def __setitem__(self, index, *args): ...
    def __LazyMap__(self, attr): ...
    def __AttrToID__(self, attr): ...
    ob: Incomplete
    def __getattr__(self, attr): ...
    def __setattr__(self, attr, value) -> None: ...
