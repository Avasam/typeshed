import re
import shutil
import sys
from pathlib import Path
from subprocess import check_call, run

_ASYNCIFIED_PATH = Path("stubs/auth0-python/auth0/_asyncified")
KEEP_LINES_STARTSWITH = ("from ", "import ", "    def ", "class ", "\n")


def main() -> None:
    # Generate the stubs
    check_call(("stubgen", "-p", "auth0.authentication", "-p", "auth0.management", "-o", _ASYNCIFIED_PATH))

    # Move the generated stubs to the right place
    shutil.copytree(_ASYNCIFIED_PATH / "auth0", _ASYNCIFIED_PATH, copy_function=shutil.move, dirs_exist_ok=True)
    shutil.rmtree(_ASYNCIFIED_PATH / "auth0")
    for path_to_remove in (
        (_ASYNCIFIED_PATH / "authentication" / "__init__.pyi"),
        (_ASYNCIFIED_PATH / "management" / "__init__.pyi"),
        # These manage async in their own way
        *_ASYNCIFIED_PATH.rglob("async_*.pyi"),
    ):
        path_to_remove.unlink()

    # Cleanup and modify the stubs
    for stub_path in _ASYNCIFIED_PATH.rglob("*.pyi"):
        with stub_path.open() as stub_file:
            lines = stub_file.readlines()

        # Only keep imports, classes and public non-special methods
        stub_content = "".join(
            [
                line
                for line in lines
                if "def _" not in line and any(True for check in KEEP_LINES_STARTSWITH if line.startswith(check))
            ]
        )

        # Remove redundant ` as ` imports
        stub_content = re.sub(r"(.+?) as \1", "\\1", stub_content)
        # Fix relative imports
        stub_content = stub_content.replace("from ..", "from ...")
        # Rename same-level local imports to use transformed class names ahead of time
        stub_content = re.sub(r"(from \.\w+? import )(\w+?)\n", "\\1_\\2Async\n", stub_content)
        # Prep extra imports
        stub_content = "from typing import type_check_only\n" + stub_content
        # Rename classes to their stub-only asyncified variant and subclass them
        relative_module = (stub_path.relative_to(_ASYNCIFIED_PATH).with_suffix("").as_posix()).replace("/", ".")
        # Transform subclasses. These are a bit weird since they may have asyncified methods hidden by base class.
        # We must also update their imports
        stub_content = re.sub(
            r"class (\w+?)\((\w+?)\):",
            """\
@type_check_only
class _\\1Async(_\\2Async):""",
            stub_content,
        )
        # Transform base classes
        stub_content = re.sub(
            r"class (\w+?):",
            f"""\
from auth0.{relative_module} import \\1  # noqa: E402
@type_check_only
class _\\1Async(\\1):""",
            stub_content,
        )
        # Update methods to their asyncified variant
        stub_content = re.sub(r"    def (.+?)\(", "    async def \\1_async(", stub_content)
        # Fix empty classes
        stub_content = stub_content.replace("):\n\n", "): ...\n\n")

        stub_path.write_text("# AUTOGENERATED BY scripts/sync_auth0_python.py\n" + stub_content)

    run((sys.executable, "-m", "pre_commit", "run", "--files", *_ASYNCIFIED_PATH.rglob("*.pyi")), check=False)


if __name__ == "__main__":
    main()
