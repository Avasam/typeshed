from . import patcomp as patcomp
from .pgen2 import token as token
from .pytree import Leaf as Leaf, Node as Node
from _typeshed import Incomplete
from collections.abc import Generator

def KeywordArg(keyword, value): ...
def LParen(): ...
def RParen(): ...
def Assign(target, source): ...
def Name(name, prefix: Incomplete | None = ...): ...
def Attr(obj, attr): ...
def Comma(): ...
def Dot(): ...
def ArgList(args, lparen=..., rparen=...): ...
def Call(func_name, args: Incomplete | None = ..., prefix: Incomplete | None = ...): ...
def Newline(): ...
def BlankLine(): ...
def Number(n, prefix: Incomplete | None = ...): ...
def Subscript(index_node): ...
def String(string, prefix: Incomplete | None = ...): ...
def ListComp(xp, fp, it, test: Incomplete | None = ...): ...
def FromImport(package_name, name_leafs): ...
def ImportAndCall(node, results, names): ...
def is_tuple(node): ...
def is_list(node): ...
def parenthesize(node): ...

consuming_calls: Incomplete

def attr_chain(obj, attr) -> Generator[Incomplete, None, None]: ...

p0: str
p1: str
p2: str
pats_built: bool

def in_special_context(node): ...
def is_probably_builtin(node): ...
def find_indentation(node): ...
def make_suite(node): ...
def find_root(node): ...
def does_tree_import(package, name, node): ...
def is_import(node): ...
def touch_import(package, name, node): ...
def find_binding(name, node, package: Incomplete | None = ...): ...
