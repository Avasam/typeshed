from . import pygram as pygram, pytree as pytree
from .pgen2 import driver as driver, grammar as grammar, literals as literals, parse as parse, token as token, tokenize as tokenize
from _typeshed import Incomplete
from collections.abc import Generator

class PatternSyntaxError(Exception): ...

def tokenize_wrapper(input) -> Generator[Incomplete, None, None]: ...

class PatternCompiler:
    grammar: Incomplete
    syms: Incomplete
    pygrammar: Incomplete
    pysyms: Incomplete
    driver: Incomplete
    def __init__(self, grammar_file: Incomplete | None = ...) -> None: ...
    def compile_pattern(self, input, debug: bool = ..., with_tree: bool = ...): ...
    def compile_node(self, node): ...
    def compile_basic(self, nodes, repeat: Incomplete | None = ...): ...
    def get_int(self, node): ...

TOKEN_MAP: Incomplete

def pattern_convert(grammar, raw_node_info): ...
def compile_pattern(pattern): ...
