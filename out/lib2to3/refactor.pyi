from . import pygram as pygram, pytree as pytree
from .fixer_util import find_root as find_root
from .pgen2 import driver as driver, token as token, tokenize as tokenize
from _typeshed import Incomplete
from collections.abc import Generator, Iterable as Iterable

def get_all_fix_names(fixer_pkg, remove_prefix: bool = ...): ...

class _EveryNode(Exception): ...

def get_fixers_from_package(pkg_name): ...

class FixerError(Exception): ...

class RefactoringTool:
    CLASS_PREFIX: str
    FILE_PREFIX: str
    fixers: Incomplete
    explicit: Incomplete
    options: Incomplete
    grammar: Incomplete
    write_unchanged_files: Incomplete
    errors: Incomplete
    logger: Incomplete
    fixer_log: Incomplete
    wrote: bool
    driver: Incomplete
    files: Incomplete
    BM: Incomplete
    bmi_pre_order: Incomplete
    bmi_post_order: Incomplete
    bmi_pre_order_heads: Incomplete
    bmi_post_order_heads: Incomplete
    def __init__(self, fixer_names, options: Incomplete | None = ..., explicit: Incomplete | None = ...) -> None: ...
    def get_fixers(self): ...
    def log_error(self, msg, *args, **kwds) -> None: ...
    def log_message(self, msg, *args) -> None: ...
    def log_debug(self, msg, *args) -> None: ...
    def print_output(self, old_text, new_text, filename, equal) -> None: ...
    def refactor(self, items, write: bool = ..., doctests_only: bool = ...) -> None: ...
    def refactor_dir(self, dir_name, write: bool = ..., doctests_only: bool = ...) -> None: ...
    def refactor_file(self, filename, write: bool = ..., doctests_only: bool = ...) -> None: ...
    def refactor_string(self, data, name): ...
    def refactor_stdin(self, doctests_only: bool = ...) -> None: ...
    def refactor_tree(self, tree, name): ...
    def traverse_by(self, fixers, traversal) -> None: ...
    def processed_file(self, new_text, filename, old_text: Incomplete | None = ..., write: bool = ..., encoding: Incomplete | None = ...) -> None: ...
    def write_file(self, new_text, filename, old_text, encoding: Incomplete | None = ...) -> None: ...
    PS1: str
    PS2: str
    def refactor_docstring(self, input, filename): ...
    def refactor_doctest(self, block, lineno, indent, filename): ...
    def summarize(self) -> None: ...
    def parse_block(self, block, lineno, indent): ...
    def wrap_toks(self, block, lineno, indent) -> Generator[Incomplete, None, None]: ...
    def gen_lines(self, block, indent) -> Generator[Incomplete, None, None]: ...

class MultiprocessingUnsupported(Exception): ...

class MultiprocessRefactoringTool(RefactoringTool):
    queue: Incomplete
    output_lock: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def refactor(self, items, write: bool = ..., doctests_only: bool = ..., num_processes: int = ...): ...
    def refactor_file(self, *args, **kwargs): ...
